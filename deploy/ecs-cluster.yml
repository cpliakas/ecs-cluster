---

AWSTemplateFormatVersion: "2010-09-09"


Description: >
  An ECS cluster in a VPC.

Parameters:

  AvailabilityZone1:
    Type: AWS::EC2::AvailabilityZone::Name

  AvailabilityZone2:
    Type: AWS::EC2::AvailabilityZone::Name

  AvailabilityZone3:
    Type: AWS::EC2::AvailabilityZone::Name

  ClusterDesiredCapacity:
    Description: The number of EC2 instances in the AutoScalingGroupCluster ASG.
    Type: Number
    Default: 1
    MinValue: 1

  ClusterMaxSize:
    Description: The maximum number of EC2 instances in the AutoScalingGroupCluster ASG.
    Type: Number
    Default: 9
    MinValue: 1

  LambdaArtifactsS3Bucket:
    Type: String
    Description: >
      REQUIRED - Specifies the name of the S3 bucket that contains the lambda
      artifacts.

  KeyName:
    Description: The name of the key pair used to SSH into the box, pass an empty string for no SSH access.
    Type: String

Conditions:
  HasKeyName: !Not [ !Equals [ "", !Ref KeyName ] ]
  HasThreeAvailabilityZones: !Not [ !Equals [ "eu-central-1", !Ref "AWS::Region" ] ]

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        -
          Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  SubnetClusterZone1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: 10.0.10.0/26
      VpcId: !Ref VPC

  SubnetClusterZone2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: 10.0.10.64/26
      VpcId: !Ref VPC

  SubnetClusterZone3:
    Type: AWS::EC2::Subnet
    Condition: HasThreeAvailabilityZones
    Properties:
      AvailabilityZone: !Ref AvailabilityZone3
      CidrBlock: 10.0.10.128/26
      VpcId: !Ref VPC

  RouteTableCluster:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RouteClusterInternetGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableCluster
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociationClusterZone1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetClusterZone1
      RouteTableId: !Ref RouteTableCluster

  SubnetRouteTableAssociationClusterZone2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetClusterZone2
      RouteTableId: !Ref RouteTableCluster

  SubnetRouteTableAssociationClusterZone3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasThreeAvailabilityZones
    Properties:
      SubnetId: !Ref SubnetClusterZone3
      RouteTableId: !Ref RouteTableCluster

  SecurityGroupCluster:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroupCluster
      VpcId: !Ref VPC

  # TODO: Lock down access?
  SecurityGroupIngressCluster:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupCluster
      SourceSecurityGroupId: !Ref SecurityGroupCluster
      FromPort: -1
      ToPort: -1
      IpProtocol: -1

  Cluster:
    Type: AWS::ECS::Cluster

  RoleService:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  RoleCluster:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  InstanceProfileCluster:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref RoleCluster

  # The launch configuration for EC2 instances in the ECS cluster.
  LaunchConfigurationCluster:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: Cluster
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/ecs/ecs.config:
              content: |
                ECS_CLUSTER={{cluster_name}}
              context:
                cluster_name: !Ref Cluster
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfileCluster
      ImageId: ami-b2df2ca4
      InstanceType: t2.micro
      KeyName: !If [ HasKeyName, !Ref KeyName, !Ref "AWS::NoValue" ]
      SecurityGroups:
        - !Ref SecurityGroupCluster
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -x
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource LaunchConfigurationCluster --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroupCluster --region ${AWS::Region}

  # The autoscaling group for EC2 instance in the ECS cluster. Events are sent
  # to the TopicAutoScalingGroupClusterEvents SNS topic to handle container
  # draining during normal autoscaling events. The custom "ecs:cluster:name" tag
  # is set for all instances in the ASG to ease discovery of the cluster that
  # the instances belong to in the lambda function.
  AutoScalingGroupCluster:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref SubnetClusterZone1
        - !Ref SubnetClusterZone2
        - !Ref SubnetClusterZone3
      DesiredCapacity: !Ref ClusterDesiredCapacity
      LaunchConfigurationName: !Ref LaunchConfigurationCluster
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup
      MinSize: !Ref ClusterDesiredCapacity
      MaxSize: !Ref ClusterMaxSize
      NotificationConfigurations:
        - TopicARN: !Ref TopicAutoScalingGroupClusterEvents
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        -
          Key: ecs:cluster:name
          Value: !Ref Cluster
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT3M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: !Ref ClusterDesiredCapacity
        PauseTime: PT5M
        WaitOnResourceSignals: true

  # Role for LifecycleHookInstanceTerminating.
  RoleLifecycleHookInstanceTerminating:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
      Path: /

  # The autoscaling lifecycle hook that sends AutoScalingGroupCluster's
  # termination events to TopicAutoScalingGroupClusterEvents.
  LifecycleHookInstanceTerminating:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroupCluster
      DefaultResult: ABANDON
      HeartbeatTimeout: 300
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      NotificationTargetARN: !Ref TopicAutoScalingGroupClusterEvents
      RoleARN: !GetAtt RoleLifecycleHookInstanceTerminating.Arn

  # The SNS topic that AutoScalingGroupCluster's events are sent to. This topic
  # triggers the LambdaFunctionEventHandler lambda function, which performs the
  # container draining operations.
  TopicAutoScalingGroupClusterEvents:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !GetAtt LambdaFunctionEventHandler.Arn
          Protocol: lambda

  # The role that LambdaFunctionEventHandler assumes at runtime which grants
  # access to the resource that are required to perform the container draining
  # operations.
  #
  # TODO: Lock down the IAM permissions. They are way too open. We should break
  # up the actions so we can restrict by resource.
  LambdaFunctionEventHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        -
          PolicyName: ContainerDrainingAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - autoscaling:CompleteLifecycleAction
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeHosts
                  - ec2:DescribeInstances
                  - ec2:DescribeTags
                  - ecs:ListContainerInstances
                  - ecs:SubmitContainerStateChange
                  - ecs:SubmitTaskStateChange
                  - ecs:DescribeContainerInstances
                  - ecs:UpdateContainerInstancesState
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                  - sns:Publish
                  - sns:ListSubscriptions
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
      Path: /

  # The lambda function that is triggered on AutoScalingGroupCluster's events.
  # This function performs the container draining operations.
  LambdaFunctionEventHandler:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaArtifactsS3Bucket
        S3Key: lambda/handler.zip
      Description: The function that listens for autoscaling events and performs container draining operations.
      Handler: handler.event_handler
      Role: !GetAtt LambdaFunctionEventHandlerRole.Arn
      Runtime: python2.7
      Timeout: 30

  # Grant TopicAutoScalingGroupClusterEvents permission to invoke
  # LambdaFunctionEventHandler.
  PermissionInvokeLambdaFunctionEventHandler:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunctionEventHandler
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref TopicAutoScalingGroupClusterEvents

  # The internal ALB for container instances in the cluster.
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      SecurityGroups:
        - !Ref SecurityGroupCluster
      Subnets:
        - !Ref SubnetClusterZone1
        - !Ref SubnetClusterZone2
        - !Ref SubnetClusterZone3

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /v1/ping
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        -
          Key: deregistration_delay.timeout_seconds
          Value: 30
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        -
          Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # The queue that CloudWatch events for Cluster are published to.
  QueueBlox:
    Type: AWS::SQS::Queue

  # The CloudWatch rule that publishes ECS events to QueueBlox.
  CloudWatchEventsCluster:
    Type: AWS::Events::Rule
    Properties:
      Description: CloudWatch events for the ECS cluster.
      EventPattern:
        source:
          - aws.ecs
        detail-type:
          - ECS Task State Change
          - ECS Container Instance State Change
      Targets:
        -
          Arn: !GetAtt QueueBlox.Arn
          Id: SQSTarget

  # Grants CloudWatchEventsCluster permission to publish messages to QueueBlox.
  QueuePolicyBlox:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref QueueBlox
      PolicyDocument:
        Version: 2012-10-17
        Id: !Join [ "", [ !GetAtt QueueBlox.Arn, "/SQSDefaultPolicy" ] ]
        Statement:
          -
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt QueueBlox.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt CloudWatchEventsCluster.Arn

  # The role applied to Blox tasks.
  RoleTaskBlox:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: TaskAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - ecs:DescribeClusters
                  - ecs:DescribeContainerInstances
                  - ecs:DescribeTaskDefinition
                  - ecs:DescribeTasks
                  - ecs:ListClusters
                  - ecs:ListContainerInstances
                  - ecs:ListTasks
                  - ecs:StartTask
                  - ecs:StopTask
                Resource: "*"
              -
                Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:ReceiveMessage
                Resource: !GetAtt QueueBlox.Arn

  # The container scheduler service, daemon scheduler, and etcd tasks.
  TaskDefinitionBlox:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: BloxFramework
      TaskRoleArn: !GetAtt RoleTaskBlox.Arn
      ContainerDefinitions:
        -
          Name: scheduler
          Hostname: scheduler
          Image: bloxoss/daemon-scheduler:0.2.0
          Memory: 128
          PortMappings:
            -
              ContainerPort: 2000
          Environment:
            -
              Name: AWS_REGION
              Value: !Ref AWS::Region
          Command:
            - --bind
            - 0.0.0.0:2000
            - --css-endpoint
            - css:3000
            - --etcd-endpoint
            - etcd:2379
          Links:
            - css
            - etcd
          Essential: false
        -
          Name: css
          Hostname: css
          Image: bloxoss/cluster-state-service:0.2.0
          Memory: 128
          Environment:
            -
              Name: AWS_REGION
              Value: !Ref AWS::Region
          Command:
            - --bind
            - 0.0.0.0:3000
            - --etcd-endpoint
            - etcd:2379
            - --queue
            - !GetAtt QueueBlox.QueueName
          Links:
            - etcd
          Essential: false
        -
          Name: etcd
          Hostname: etcd
          Image: quay.io/coreos/etcd:v3.0.15
          Memory: 256
          Environment:
            -
              Name: ETCDCTL_API
              Value: 3
          Command:
            - /usr/local/bin/etcd
            - --data-dir
            - /var/lib/etcd/data
            - --wal-dir
            - /var/lib/etcd/wal
            - --listen-client-urls
            - http://0.0.0.0:2379
            - --advertise-client-urls
            - http://0.0.0.0:2379
            - --listen-peer-urls
            - http://0.0.0.0:2380
          MountPoints:
            -
              SourceVolume: etcd-state
              ContainerPath: /var/lib/etcd
          Essential: true
      Volumes:
        -
          Host:
            SourcePath: /var/lib/etcd
          Name: etcd-state

  ServiceBloxScheduler:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      LoadBalancers:
        -
          TargetGroupArn: !Ref LoadBalancerTargetGroup
          ContainerPort: 2000
          ContainerName: scheduler
      Role: !GetAtt RoleService.Arn
      TaskDefinition: !Ref TaskDefinitionBlox

  RoleLambdaFunctionProxy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
             - sts:AssumeRole
      Policies:
        -
          PolicyName: ProxyAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaFunctionProxy:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaArtifactsS3Bucket
        S3Key: lambda/proxy.zip
      Description: VPC Lambda Proxy
      Environment:
        Variables:
          UPSTREAM_HOST: !GetAtt LoadBalancer.DNSName
      Handler: proxy.handler
      Runtime: nodejs4.3
      Role: !GetAtt RoleLambdaFunctionProxy.Arn
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupCluster
        SubnetIds:
          - !Ref SubnetClusterZone1
          - !Ref SubnetClusterZone2

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunctionProxy.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join [ "", [ "arn:aws:execute-api:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !Ref RestApiBlox, "/*/*/*" ] ]

  RestApiBlox:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join [ " ", [ !Ref "AWS::StackName", "scheduler proxy" ] ]
      Description: API Gateway REST API

  ApiGatewayResourceBlox:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApiBlox.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref RestApiBlox

  ApiGatewayMethodBlox:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref ApiGatewayResourceBlox
      RestApiId: !Ref RestApiBlox
      HttpMethod: ANY
      AuthorizationType: AWS_IAM
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Uri: !Join [ "", [ "arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt LambdaFunctionProxy.Arn, "/invocations" ] ]

  ApiGatewayDeploymentBlox:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Deploy API
      RestApiId: !Ref RestApiBlox
      StageName: blox

Outputs:

  Cluster:
    Description: The logical ID of the ECS cluster
    Value: !Ref Cluster

  SchedulerUrl:
    Description: The URL to the scheduler API
    Value: !Join [ "", [ "https://", !Ref RestApiBlox, ".execute-api.", !Ref "AWS::Region", ".amazonaws.com/", "blox" ] ]
