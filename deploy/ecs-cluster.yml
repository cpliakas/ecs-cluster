---

AWSTemplateFormatVersion: "2010-09-09"


Description: >
  An ECS cluster in a VPC

Parameters:

  ArtifactsS3Bucket:
    Type: String
    Description: >
      REQUIRED - Specifies the name of the S3 bucket that contains various
      artifacts, e.g. lambda builds and cloudformation scripts.

  AvailabilityZone1:
    Type: AWS::EC2::AvailabilityZone::Name

  AvailabilityZone2:
    Type: AWS::EC2::AvailabilityZone::Name

  AvailabilityZone3:
    Type: AWS::EC2::AvailabilityZone::Name

  ClusterDesiredCapacity:
    Description: The number of EC2 instances in the AutoScalingGroupCluster ASG.
    Type: Number
    Default: 1
    MinValue: 1

  ClusterMaxSize:
    Description: The maximum number of EC2 instances in the AutoScalingGroupCluster ASG.
    Type: Number
    Default: 9
    MinValue: 1

  KeyName:
    Description: The name of the key pair used to SSH into the box, pass an empty string for no SSH access.
    Type: String

Conditions:
  HasKeyName: !Not [ !Equals [ "", !Ref KeyName ] ]
  HasThreeAvailabilityZones: !Not [ !Equals [ "eu-central-1", !Ref "AWS::Region" ] ]

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        -
          Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RoleFlowLog:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: "*"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  FlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt RoleFlowLog.Arn
      LogGroupName: !Ref LogGroup
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL

  SubnetClusterZone1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: 10.0.10.0/26
      VpcId: !Ref VPC

  SubnetClusterZone2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: 10.0.10.64/26
      VpcId: !Ref VPC

  SubnetClusterZone3:
    Type: AWS::EC2::Subnet
    Condition: HasThreeAvailabilityZones
    Properties:
      AvailabilityZone: !Ref AvailabilityZone3
      CidrBlock: 10.0.10.128/26
      VpcId: !Ref VPC

  RouteTableCluster:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RouteClusterInternetGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableCluster
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociationClusterZone1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetClusterZone1
      RouteTableId: !Ref RouteTableCluster

  SubnetRouteTableAssociationClusterZone2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetClusterZone2
      RouteTableId: !Ref RouteTableCluster

  SubnetRouteTableAssociationClusterZone3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasThreeAvailabilityZones
    Properties:
      SubnetId: !Ref SubnetClusterZone3
      RouteTableId: !Ref RouteTableCluster

  SecurityGroupCluster:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroupCluster
      VpcId: !Ref VPC

  # TODO: Lock down access?
  SecurityGroupIngressCluster:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupCluster
      SourceSecurityGroupId: !Ref SecurityGroupCluster
      FromPort: -1
      ToPort: -1
      IpProtocol: -1

  Cluster:
    Type: AWS::ECS::Cluster

  RoleService:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  RoleCluster:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        -
          PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: "arn:aws:logs:*:*:*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  InstanceProfileCluster:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref RoleCluster

  # The launch configuration for EC2 instances in the ECS cluster. The awslogs
  # service is installed and started in order to send container logs to
  # CloudWatch.
  LaunchConfigurationCluster:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: Cluster
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awslogs.conf:
              content: |
                [general]
                state_file = /var/lib/awslogs/agent-state 
            /etc/ecs/ecs.config:
              content: |
                ECS_CLUSTER={{cluster_name}}
              context:
                cluster_name: !Ref Cluster
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfileCluster
      ImageId: ami-b2df2ca4
      InstanceType: t2.micro
      KeyName: !If [ HasKeyName, !Ref KeyName, !Ref "AWS::NoValue" ]
      SecurityGroups:
        - !Ref SecurityGroupCluster
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -x
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource LaunchConfigurationCluster --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroupCluster --region ${AWS::Region}

  # The autoscaling group for EC2 instance in the ECS cluster. Events are sent
  # to the TopicAutoScalingGroupClusterEvents SNS topic to handle container
  # draining during normal autoscaling events. The custom "ecs:cluster:name" tag
  # is set for all instances in the ASG to ease discovery of the cluster that
  # the instances belong to in the lambda function.
  AutoScalingGroupCluster:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref SubnetClusterZone1
        - !Ref SubnetClusterZone2
        - !Ref SubnetClusterZone3
      DesiredCapacity: !Ref ClusterDesiredCapacity
      LaunchConfigurationName: !Ref LaunchConfigurationCluster
      MinSize: !Ref ClusterDesiredCapacity
      MaxSize: !Ref ClusterMaxSize
      NotificationConfigurations:
        - TopicARN: !Ref TopicAutoScalingGroupClusterEvents
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        -
          Key: ecs:cluster:name
          Value: !Ref Cluster
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT3M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: !Ref ClusterDesiredCapacity
        PauseTime: PT5M
        WaitOnResourceSignals: true

  # Role for LifecycleHookInstanceTerminating.
  RoleLifecycleHookInstanceTerminating:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
      Path: /

  # The autoscaling lifecycle hook that sends AutoScalingGroupCluster's
  # termination events to TopicAutoScalingGroupClusterEvents.
  LifecycleHookInstanceTerminating:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroupCluster
      DefaultResult: ABANDON
      HeartbeatTimeout: 300
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      NotificationTargetARN: !Ref TopicAutoScalingGroupClusterEvents
      RoleARN: !GetAtt RoleLifecycleHookInstanceTerminating.Arn

  # The SNS topic that AutoScalingGroupCluster's events are sent to. This topic
  # triggers the LambdaFunctionEventHandler lambda function, which performs the
  # container draining operations.
  TopicAutoScalingGroupClusterEvents:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !GetAtt LambdaFunctionEventHandler.Arn
          Protocol: lambda

  # The role that LambdaFunctionEventHandler assumes at runtime which grants
  # access to the resource that are required to perform the container draining
  # operations.
  #
  # TODO: Lock down the IAM permissions. They are way too open. We should break
  # up the actions so we can restrict by resource.
  LambdaFunctionEventHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        -
          PolicyName: ContainerDrainingAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - autoscaling:CompleteLifecycleAction
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeHosts
                  - ec2:DescribeInstances
                  - ec2:DescribeTags
                  - ecs:ListContainerInstances
                  - ecs:SubmitContainerStateChange
                  - ecs:SubmitTaskStateChange
                  - ecs:DescribeContainerInstances
                  - ecs:UpdateContainerInstancesState
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                  - sns:Publish
                  - sns:ListSubscriptions
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
      Path: /

  # The lambda function that is triggered on AutoScalingGroupCluster's events.
  # This function performs the container draining operations.
  LambdaFunctionEventHandler:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ArtifactsS3Bucket
        S3Key: lambda/events.zip
      Description: The function that listens for autoscaling events and performs container draining operations.
      Handler: events.handler
      Role: !GetAtt LambdaFunctionEventHandlerRole.Arn
      Runtime: python2.7
      Timeout: 30

  # Grant TopicAutoScalingGroupClusterEvents permission to invoke
  # LambdaFunctionEventHandler.
  PermissionInvokeLambdaFunctionEventHandler:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunctionEventHandler
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref TopicAutoScalingGroupClusterEvents

Outputs:

  Cluster:
    Description: The logical ID of the ECS cluster
    Value: !Ref Cluster

  ServiceRoleArn:
    Description: The ARN of the ECS container service role
    Value: !GetAtt RoleService.Arn

  SecurityGroupCluster:
    Description: The security group attached to EC2 instance in the ECS cluster
    Value: !Ref SecurityGroupCluster

  SubnetClusterZone1:
    Description: The first of three subnets that the cluster is deployed in
    Value: !Ref SubnetClusterZone1

  SubnetClusterZone2:
    Description: The second of three subnets that the cluster is deployed in
    Value: !Ref SubnetClusterZone2

  SubnetClusterZone3:
    Description: The third of three subnets that the cluster is deployed in
    Value: !Ref SubnetClusterZone3

  VPC:
    Description: The logical ID of the VPC that the ECS cluster is deployed in
    Value: !Ref VPC
