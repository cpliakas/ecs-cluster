---

AWSTemplateFormatVersion: "2010-09-09"


Description: >
  An ECS Cluster with Blox.

Parameters:

  AvailabilityZone1:
    Type: AWS::EC2::AvailabilityZone::Name

  AvailabilityZone2:
    Type: AWS::EC2::AvailabilityZone::Name

  AvailabilityZone3:
    Type: AWS::EC2::AvailabilityZone::Name

  BloxSchedulerDesiredCount:
    Description: The number of simultaneous blox scheduler tasks to run on the cluster.
    Type: Number
    Default: 1
    MinValue: 1

  ClusterDesiredCapacity:
    Description: The number of EC2 instances in the AutoScalingGroupCluster ASG.
    Type: Number
    Default: 1
    MinValue: 1

  ClusterMaxSize:
    Description: The maximum number of EC2 instances in the AutoScalingGroupCluster ASG.
    Type: Number
    Default: 9
    MinValue: 1

  KeyName:
    Description: The name of the key pair used to SSH into the box, pass an empty string for no SSH access.
    Type: String

Conditions:
  HasKeyName: !Not [ !Equals [ "", !Ref KeyName ] ]
  HasThreeAvailabilityZones: !Not [ !Equals [ "eu-central-1", !Ref "AWS::Region" ] ]

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        -
          Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  SubnetClusterZone1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: 10.0.10.0/26
      VpcId: !Ref VPC

  SubnetClusterZone2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: 10.0.10.64/26
      VpcId: !Ref VPC

  SubnetClusterZone3:
    Type: AWS::EC2::Subnet
    Condition: HasThreeAvailabilityZones
    Properties:
      AvailabilityZone: !Ref AvailabilityZone3
      CidrBlock: 10.0.10.128/26
      VpcId: !Ref VPC

  RouteTableCluster:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RouteClusterInternetGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableCluster
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociationClusterZone1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetClusterZone1
      RouteTableId: !Ref RouteTableCluster

  SubnetRouteTableAssociationClusterZone2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetClusterZone2
      RouteTableId: !Ref RouteTableCluster

  SubnetRouteTableAssociationClusterZone3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasThreeAvailabilityZones
    Properties:
      SubnetId: !Ref SubnetClusterZone3
      RouteTableId: !Ref RouteTableCluster

  SecurityGroupCluster:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroupCluster
      VpcId: !Ref VPC

  SecurityGroupIngressCluster:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupCluster
      SourceSecurityGroupId: !Ref SecurityGroupCluster
      FromPort: "-1"
      ToPort: "-1"
      IpProtocol: "-1"

  Cluster:
    Type: AWS::ECS::Cluster

  RoleService:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  RoleCluster:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  InstanceProfileCluster:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref RoleCluster

  LaunchConfigurationCluster:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: Cluster
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/ecs/ecs.config:
              content: |
                ECS_CLUSTER={{cluster_name}}
              context:
                cluster_name: !Ref Cluster
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfileCluster
      ImageId: ami-b2df2ca4
      InstanceType: t2.micro
      KeyName: !If [ HasKeyName, !Ref KeyName, !Ref "AWS::NoValue" ]
      SecurityGroups:
        - !Ref SecurityGroupCluster
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -x
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource LaunchConfigurationCluster --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroupCluster --region ${AWS::Region}

  AutoScalingGroupCluster:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref SubnetClusterZone1
        - !Ref SubnetClusterZone2
        - !Ref SubnetClusterZone3
      DesiredCapacity: !Ref ClusterDesiredCapacity
      LaunchConfigurationName: !Ref LaunchConfigurationCluster
      # TargetGroupARNs:
      #   - !Ref TargetGroupCluster
      MinSize: !Ref ClusterDesiredCapacity
      MaxSize: !Ref ClusterMaxSize
    CreationPolicy:
      ResourceSignal:
        Timeout: PT3M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: !Ref ClusterDesiredCapacity
        PauseTime: PT5M
        WaitOnResourceSignals: true

  QueueBlox:
    Type: AWS::SQS::Queue

  ClusterEventsToQueue:
    Type: AWS::Events::Rule
    Properties:
      Description: "CloudWatch ECS events"
      EventPattern:
        source:
          - "aws.ecs"
        detail-type:
          - "ECS Task State Change"
          - "ECS Container Instance State Change"
      Targets:
        -
          Arn: !GetAtt QueueBlox.Arn
          Id: "SQSTarget"

  QueuePolicyBlox:
    Type: "AWS::SQS::QueuePolicy"
    Properties:
      Queues:
        - !Ref QueueBlox
      PolicyDocument:
        Version: "2012-10-17"
        Id: !Join [ "", [ !GetAtt QueueBlox.Arn, "/SQSDefaultPolicy" ] ]
        Statement:
          -
            Effect: "Allow"
            Principal:
              AWS: "*"
            Action:
              - "sqs:SendMessage"
            Resource:
              - !GetAtt QueueBlox.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ClusterEventsToQueue.Arn

  RoleTaskBlox:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "TaskAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "ecs:DescribeClusters"
                  - "ecs:DescribeContainerInstances"
                  - "ecs:DescribeTaskDefinition"
                  - "ecs:DescribeTasks"
                  - "ecs:ListClusters"
                  - "ecs:ListContainerInstances"
                  - "ecs:ListTasks"
                  - "ecs:StartTask"
                  - "ecs:StopTask"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                  - "sqs:GetQueueUrl"
                  - "sqs:ReceiveMessage"
                Resource: !GetAtt QueueBlox.Arn

  TaskDefinitionBlox:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: BloxFramework
      TaskRoleArn: !GetAtt RoleTaskBlox.Arn
      ContainerDefinitions:
        -
          Name: "scheduler"
          Hostname: "scheduler"
          Image: "bloxoss/daemon-scheduler:0.2.0"
          Memory: "128"
          PortMappings:
            -
              ContainerPort: "2000"
          Environment:
            -
              Name: "AWS_REGION"
              Value: !Ref "AWS::Region"
          Command:
            - "--bind"
            - "0.0.0.0:2000"
            - "--css-endpoint"
            - "css:3000"
            - "--etcd-endpoint"
            - "etcd:2379"
          Links:
            - "css"
            - "etcd"
          Essential: "false"
        -
          Name: "css"
          Hostname: "css"
          Image: "bloxoss/cluster-state-service:0.2.0"
          Memory: "128"
          Environment:
            -
              Name: "AWS_REGION"
              Value: !Ref "AWS::Region"
          Command:
            - "--bind"
            - "0.0.0.0:3000"
            - "--etcd-endpoint"
            - "etcd:2379"
            - "--queue"
            - !Ref QueueBlox
          Links:
            - "etcd"
          Essential: "false"
        -
          Name: "etcd"
          Hostname: "etcd"
          Image: "quay.io/coreos/etcd:v3.0.15"
          Memory: "256"
          Environment:
            -
              Name: "ETCDCTL_API"
              Value: "3"
          Command:
            - "/usr/local/bin/etcd"
            - "--data-dir"
            - "/var/lib/etcd/data"
            - "--wal-dir"
            - "/var/lib/etcd/wal"
            - "--listen-client-urls"
            - "http://0.0.0.0:2379"
            - "--advertise-client-urls"
            - "http://0.0.0.0:2379"
            - "--listen-peer-urls"
            - "http://0.0.0.0:2380"
          MountPoints:
            -
              SourceVolume: "etcd-state"
              ContainerPath: "/var/lib/etcd"
          Essential: "true"
      Volumes:
        -
          Host:
            SourcePath: "/var/lib/etcd"
          Name: "etcd-state"

  # ServiceBloxScheduler:
  #   Type: "AWS::ECS::Service"
  #   Properties:
  #     Cluster: !Ref Cluster
  #     DesiredCount: !Ref BloxSchedulerDesiredCount
  #     DeploymentConfiguration:
  #       MaximumPercent: 100
  #       MinimumHealthyPercent: 0
  #     LoadBalancers:
  #       -
  #         TargetGroupArn: !Ref TargetGroupBloxScheduler
  #         ContainerPort: 2000
  #         ContainerName: scheduler
  #     Role: !GetAtt RoleService.Arn
  #     TaskDefinition: !Ref TaskDefinitionBlox
  #   DependsOn:
  #     - LoadBalancer
  #     - LoadBalancerListener
  #     - TargetGroupBloxScheduler

  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internal
      SecurityGroups:
        - !Ref SecurityGroupCluster
      Subnets:
        - !Ref SubnetClusterZone1
        - !Ref SubnetClusterZone2
        - !Ref SubnetClusterZone3

  LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        -
          Type: forward
          TargetGroupArn: !Ref TargetGroupBloxScheduler
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  TargetGroupBloxScheduler:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /v1/ping
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        -
          Key: deregistration_delay.timeout_seconds
          Value: 30
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
