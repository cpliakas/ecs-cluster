---

AWSTemplateFormatVersion: "2010-09-09"


Description: >
  A Blox Framework deployment in an ECS cluster

Parameters:

  ApiStageName:
    Type: String
    Default: blox
    Description: The stage that the API is deployed to, defaults to 'blox'

  ArtifactsS3Bucket:
    Type: String
    Description: >
      REQUIRED - Specifies the name of the S3 bucket that contains various
      artifacts, e.g. lambda builds and cloudformation scripts.

  AvailabilityZone1:
    Type: AWS::EC2::AvailabilityZone::Name

  AvailabilityZone2:
    Type: AWS::EC2::AvailabilityZone::Name

  AvailabilityZone3:
    Type: AWS::EC2::AvailabilityZone::Name

  KeyName:
    Description: The name of the key pair used to SSH into the box, pass an empty string for no SSH access.
    Type: String

Resources:

  EcsClusterStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join [ "", [ "https://s3.amazonaws.com/", !Ref ArtifactsS3Bucket, "/cloudformation/ecs-cluster.yml" ] ]
      Parameters:
        ArtifactsS3Bucket: !Ref ArtifactsS3Bucket
        AvailabilityZone1: !Ref AvailabilityZone1
        AvailabilityZone2: !Ref AvailabilityZone2
        AvailabilityZone3: !Ref AvailabilityZone3
        ClusterDesiredCapacity: 1
        ClusterMaxSize: 2
        KeyName: !Ref KeyName

  # The internal ALB used to expose the Blox scheduler APIs.
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      SecurityGroups:
        - !GetAtt EcsClusterStack.Outputs.SecurityGroupCluster
      Subnets:
        - !GetAtt EcsClusterStack.Outputs.SubnetClusterZone1
        - !GetAtt EcsClusterStack.Outputs.SubnetClusterZone2
        - !GetAtt EcsClusterStack.Outputs.SubnetClusterZone3

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /v1/ping
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        -
          Key: deregistration_delay.timeout_seconds
          Value: 30
      UnhealthyThresholdCount: 2
      VpcId: !GetAtt EcsClusterStack.Outputs.VPC

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        -
          Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # The queue that CloudWatch events for Cluster are published to.
  QueueBlox:
    Type: AWS::SQS::Queue

  # The CloudWatch rule that publishes ECS events to QueueBlox.
  CloudWatchEventsCluster:
    Type: AWS::Events::Rule
    Properties:
      Description: CloudWatch events for the ECS cluster.
      EventPattern:
        source:
          - aws.ecs
        detail-type:
          - ECS Task State Change
          - ECS Container Instance State Change
      Targets:
        -
          Arn: !GetAtt QueueBlox.Arn
          Id: SQSTarget

  # Grants CloudWatchEventsCluster permission to publish messages to QueueBlox.
  QueuePolicyBlox:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref QueueBlox
      PolicyDocument:
        Version: 2012-10-17
        Id: !Join [ "", [ !GetAtt QueueBlox.Arn, "/SQSDefaultPolicy" ] ]
        Statement:
          -
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt QueueBlox.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt CloudWatchEventsCluster.Arn

  # The role applied to Blox tasks.
  RoleTaskBlox:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: TaskAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - ecs:DescribeClusters
                  - ecs:DescribeContainerInstances
                  - ecs:DescribeTaskDefinition
                  - ecs:DescribeTasks
                  - ecs:ListClusters
                  - ecs:ListContainerInstances
                  - ecs:ListTasks
                  - ecs:StartTask
                  - ecs:StopTask
                Resource: "*"
              -
                Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:ReceiveMessage
                Resource: !GetAtt QueueBlox.Arn

  # The container scheduler service, daemon scheduler, and etcd tasks.
  TaskDefinitionBlox:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: BloxFramework
      TaskRoleArn: !GetAtt RoleTaskBlox.Arn
      ContainerDefinitions:
        -
          Name: scheduler
          Hostname: scheduler
          Image: bloxoss/daemon-scheduler:0.2.0
          Memory: 128
          PortMappings:
            -
              ContainerPort: 2000
          Environment:
            -
              Name: AWS_REGION
              Value: !Ref AWS::Region
          Command:
            - --bind
            - 0.0.0.0:2000
            - --css-endpoint
            - css:3000
            - --etcd-endpoint
            - etcd:2379
          Links:
            - css
            - etcd
          Essential: false
        -
          Name: css
          Hostname: css
          Image: bloxoss/cluster-state-service:0.2.0
          Memory: 128
          Environment:
            -
              Name: AWS_REGION
              Value: !Ref AWS::Region
          Command:
            - --bind
            - 0.0.0.0:3000
            - --etcd-endpoint
            - etcd:2379
            - --queue
            - !GetAtt QueueBlox.QueueName
          Links:
            - etcd
          Essential: false
        -
          Name: etcd
          Hostname: etcd
          Image: quay.io/coreos/etcd:v3.0.15
          Memory: 256
          Environment:
            -
              Name: ETCDCTL_API
              Value: 3
          Command:
            - /usr/local/bin/etcd
            - --data-dir
            - /var/lib/etcd/data
            - --wal-dir
            - /var/lib/etcd/wal
            - --listen-client-urls
            - http://0.0.0.0:2379
            - --advertise-client-urls
            - http://0.0.0.0:2379
            - --listen-peer-urls
            - http://0.0.0.0:2380
          MountPoints:
            -
              SourceVolume: etcd-state
              ContainerPath: /var/lib/etcd
          Essential: true
      Volumes:
        -
          Host:
            SourcePath: /var/lib/etcd
          Name: etcd-state

  ServiceBloxScheduler:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancer
      - LoadBalancerListener
      - LoadBalancerTargetGroup
    Properties:
      Cluster: !GetAtt EcsClusterStack.Outputs.Cluster
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      LoadBalancers:
        -
          TargetGroupArn: !Ref LoadBalancerTargetGroup
          ContainerPort: 2000
          ContainerName: scheduler
      Role: !GetAtt EcsClusterStack.Outputs.ServiceRoleArn
      TaskDefinition: !Ref TaskDefinitionBlox

  RoleLambdaFunctionProxy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
             - sts:AssumeRole
      Policies:
        -
          PolicyName: ProxyAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaFunctionProxy:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ArtifactsS3Bucket
        S3Key: lambda/proxy.zip
      Description: Proxies requests from API Gateway to an internal host e.g. and ALB
      Environment:
        Variables:
          UPSTREAM_HOST: !GetAtt LoadBalancer.DNSName
      Handler: proxy.handler
      Runtime: nodejs4.3
      Role: !GetAtt RoleLambdaFunctionProxy.Arn
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt EcsClusterStack.Outputs.SecurityGroupCluster
        SubnetIds:
          - !GetAtt EcsClusterStack.Outputs.SubnetClusterZone1
          - !GetAtt EcsClusterStack.Outputs.SubnetClusterZone2

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunctionProxy.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join [ "", [ "arn:aws:execute-api:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !Ref RestApiBlox, "/*/*/*" ] ]

  RestApiBlox:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join [ " ", [ !Ref "AWS::StackName", "scheduler proxy" ] ]
      Description: API Gateway that proxies requests to the Blox scheduler API

  ApiGatewayResourceBlox:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApiBlox.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref RestApiBlox

  ApiGatewayMethodBlox:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref ApiGatewayResourceBlox
      RestApiId: !Ref RestApiBlox
      HttpMethod: ANY
      AuthorizationType: AWS_IAM
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Uri: !Join [ "", [ "arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt LambdaFunctionProxy.Arn, "/invocations" ] ]

  ApiGatewayDeploymentBlox:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethodBlox
    Properties:
      Description: Deploy API
      RestApiId: !Ref RestApiBlox
      StageName: !Ref ApiStageName

Outputs:

  SchedulerApi:
    Description: The URL to the scheduler API
    Value: !Join [ "", [ "https://", !Ref RestApiBlox, ".execute-api.", !Ref "AWS::Region", ".amazonaws.com/", "blox" ] ]
